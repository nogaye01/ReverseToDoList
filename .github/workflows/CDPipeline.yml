name: CI/CD Automation

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev

jobs:
  # Job to build and test when dev branch changes
  build_and_test_dev:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'  

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm install

    - name: Run unit tests for frontend
      run: |
        cd frontend
        npm test

    - name: Run unit tests for backend
      run: |
        cd backend
        npm test

    - name: Merge dev to main (if tests pass)
      if: success()
      uses: dev-drprasad/delete-merged-branch@v3.0.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch_name: dev
        target_branch: main

  # Job to build, test, and deploy when main branch changes
  build_test_deploy_main:
    needs: build_and_test_dev
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'  

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install

    - name: Install backend dependencies
      run: |
        cd backend
        npm install

    - name: Run unit tests for frontend
      run: |
        cd frontend
        npm test

    - name: Run unit tests for backend
      run: |
        cd backend
        npm test

    - name: Run E2E tests
      run: |
        cd e2e-tests
        npm install
        npm run test

    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.yml build

    - name: Push Docker images to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker-compose -f docker-compose.yml push
